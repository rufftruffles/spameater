# SpamEater nginx configuration for Docker
# Based on original nginx.conf with container optimizations

server {
    listen 80;
    listen [::]:80;
    server_name DOMAIN_PLACEHOLDER www.DOMAIN_PLACEHOLDER;
    
    # Document root
    root /opt/spameater/frontend;
    index index.html;
    
    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Enhanced Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self'; img-src 'self' https: data:; font-src 'self'; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';" always;
    
    # Remove server version
    server_tokens off;
    
    # Block path traversal attempts
    location ~ /\.\. { return 403; }
    location ~ \.\./ { return 403; }
    location ~ \.\.%2[fF] { return 403; }
    location ~ %2e%2e { return 403; }
    location ~ %252e { return 403; }
    
    # Gzip compression
    gzip on;
    gzip_types text/plain text/css text/javascript application/javascript application/json;
    gzip_min_length 1000;
    
    # Client body size limit
    client_max_body_size 10M;
    
    # Timeouts
    client_body_timeout 10s;
    client_header_timeout 10s;
    send_timeout 10s;
    
    # Let's Encrypt challenge directory
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        allow all;
    }
    
    # Security.txt file
    location = /.well-known/security.txt {
        root /opt/spameater/frontend;
        add_header Cache-Control "public, max-age=86400";
    }
    
    # Main application
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache static assets
        location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1d;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # API proxy
    location /api/ {
        # Apply rate limiting
        limit_req zone=api_limit burst=10 nodelay;
        
        # Security headers for API
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        
        proxy_pass http://127.0.0.1:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # Inbox JSON file serving with enhanced security
    location ~ "^/api/inbox/([\w.-]{1,50})\.json$" {
        # Security checks
        if ($request_uri ~ "\.\.") { return 403; }
        if ($request_uri ~ "%2e%2e|%252e|%5c|%255c") { return 403; }
        if ($request_uri !~ "^/api/inbox/[\w.-]{1,50}\.json(\?.*)?$") { return 403; }
        
        # Apply rate limiting
        limit_req zone=inbox_limit burst=20 nodelay;
        
        # Validate the captured prefix
        set $inbox_prefix $1;
        
        if ($inbox_prefix ~ "\.\.") { return 403; }
        if ($inbox_prefix ~ "[/\\\\]") { return 403; }
        if ($inbox_prefix ~ "[<>'\";|&]") { return 403; }
        
        # Serve the file
        rewrite "^/api/inbox/([\w.-]{1,50})\.json$" /inboxes/$1.json break;
        root /opt/spameater/data;
        
        default_type application/json;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header X-Robots-Tag "noindex, nofollow" always;
    }
    
    # Email domain info endpoint
    location = /api/domain {
        limit_req zone=domain_limit burst=5 nodelay;
        
        add_header Content-Type application/json;
        add_header Cache-Control "public, max-age=3600";
        add_header Access-Control-Allow-Origin "*";
        return 200 '{"domain": "EMAIL_DOMAIN_PLACEHOLDER"}';
    }
    
    # Block access to sensitive files
    location ~ /\. { deny all; }
    location ~ \.(env|sql|db|backup)$ { deny all; }
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html { internal; }
    location = /50x.html { internal; }
    
    # Disable access logs for common assets
    location = /favicon.ico {
        access_log off;
        log_not_found off;
    }
    
    location = /robots.txt {
        allow all;
        access_log off;
        log_not_found off;
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /api/\nDisallow: /\n";
    }
}

# SSL configuration will be added by certbot when certificates are generated
